import type { GetStaticPaths, GetStaticProps, NextPage } from 'next'
import Head from 'next/head'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faArrowLeft, faFaceThinking } from '@fortawesome/pro-regular-svg-icons'
import Link from 'next/link'
import { getArticleFiles, readArticle } from '../../../util/articles'
import type { Article } from '../../../types/article'
import { isArticle } from '../../../types/article'
import { PageLayout } from '../../../layout/PageLayout'
import { Post } from '../../../components/Post'

type PageProps = {
  article: Article | null
  slug: string
}

type PageParams = {
  slug: string
}

export const getStaticPaths: GetStaticPaths<PageParams> = async () => {
  const files = await getArticleFiles()

  let filenames: { params: PageParams }[] = []

  for (const { filename } of files) {
    if (filename) filenames = [...filenames, { params: { slug: filename } }]
  }

  return {
    paths: filenames,
    fallback: true,
  }
}

export const getStaticProps: GetStaticProps<PageProps, PageParams> = async ({
  params,
}) => {
  const files = await getArticleFiles()

  const article = files.find((file) => file.slug === params?.slug)

  const file = article ? await readArticle(article) : null

  return {
    props: {
      article: file,
      slug: params?.slug || '',
    },
  }
}

const TechArticlePage: NextPage<PageProps> = ({ article, slug }) => {
  return (
    <PageLayout>
      <Head>
        <title>
          {`${article?.metadata?.title || 'Not Found'} | Cameron Burrows`}
        </title>
        <meta name="description" content="Generated by create-t3-app" />
        {article && article.metadata && (
          <>
            <meta
              name="og:url"
              content={`http://cameronburrows.com.au/${article.slug}`}
            />
            <meta property="og:title" content={article.metadata.title} />
            <meta
              property="og:description"
              content={article.metadata.summary}
            />
            {/* <meta property="og:image" content={} /> */}
          </>
        )}
        <meta name="description" content="Cameron Burrows website and blog" />
        <link rel="icon" href="/favicon.svg" />
      </Head>
      {article && isArticle(article) ? (
        <Post article={article} />
      ) : (
        <div className="container mx-auto max-w-2xl py-16">
          <div className="flex items-baseline gap-2 pt-4 pb-10 text-6xl opacity-50">
            <FontAwesomeIcon icon={faFaceThinking} />
            <h2 className="font-display text-6xl font-black">Hmmm...</h2>
          </div>
          <h1 className="mb-6 px-8 font-display text-xl">
            Not sure about that post
          </h1>
          <div className="flex items-center justify-center">
            <Link href="/blog">
              <a className="group flex items-center">
                <div className="w-0">
                  <FontAwesomeIcon
                    icon={faArrowLeft}
                    className="translate-x-1 scale-75 pr-3 opacity-0 transition-all group-hover:translate-x-0 group-hover:scale-100 group-hover:opacity-100"
                  />
                </div>
                <div className="z-10 transition-transform group-hover:translate-x-6">
                  <div className="rounded-2xl bg-accent px-6 py-2">
                    Back to blog
                  </div>
                </div>
              </a>
            </Link>
          </div>
        </div>
      )}
    </PageLayout>
  )
}

export default TechArticlePage
